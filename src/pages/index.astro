---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Generador de Personalizaciones.">
  <main
    class="w-full min-h-screen py-10 bg-gray-900 text-white dark:bg-gray-100 dark:text-gray-900"
  >
    <h1 class="font-bold text-center text-3xl mb-8">
      Generador de Personalizaciones
    </h1>
    <form
      id="dbfForm"
      class="max-w-lg mx-auto bg-gray-800 dark:bg-white p-8 rounded-lg shadow-lg"
    >
			<div class="mb-4 hidden">
				<p id="message"></p>
			</div>
      <div class="mb-4">
        <label for="num_ideper" class="block text-sm font-medium mb-2">
          Número de Identificación Personal
        </label>
        <input
          type="text"
          id="num_ideper"
          name="num_ideper"
          maxlength="11"
          required
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4">
        <label for="apellido_1" class="block text-sm font-medium mb-2">
          Primer Apellido
        </label>
        <input
          type="text"
          id="apellido_1"
          name="apellido_1"
          maxlength="50"
          required
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4">
        <label for="apellido_2" class="block text-sm font-medium mb-2">
          Segundo Apellido
        </label>
        <input
          type="text"
          id="apellido_2"
          name="apellido_2"
          maxlength="50"
          required
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4">
        <label for="nombre" class="block text-sm font-medium mb-2">
          Nombre
        </label>
        <input
          type="text"
          id="nombre"
          name="nombre"
          maxlength="50"
          required
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4">
        <label for="nombre" class="block text-sm font-medium mb-2">
          Nombre y Apellidos
        </label>
        <input
          type="text"
          id="nomb_apell"
          name="nomb_apell"
          maxlength="23"
          required
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4">
        <label for="dir_perso1" class="block text-sm font-medium mb-2">
          Dirección Personal Línea 1
        </label>
        <input
          type="text"
          id="dir_perso1"
          name="dir_perso1"
          maxlength="35"
          required
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4">
        <label for="dir_perso2" class="block text-sm font-medium mb-2">
          Dirección Personal Línea 2
        </label>
        <input
          type="text"
          id="dir_perso2"
          name="dir_perso2"
          maxlength="35"
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4">
        <label for="dir_perso3" class="block text-sm font-medium mb-2">
          Dirección Personal Línea 3
        </label>
        <input
          type="text"
          id="dir_perso3"
          name="dir_perso3"
          maxlength="35"
          class="w-full px-3 py-2 bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-900 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <div class="mb-4 flex justify-center gap-x-2 items-start">
        <button
          type="button"
          id="addAnother"
          class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 rounded-lg transition duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
        >
          Agregar Otro
        </button>
        <button
          type="submit"
          class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 rounded-lg transition duration-300 focus:outline-none focus:ring-2 focus:ring-green-500"
        >
          Generar
        </button>
      </div>
    </form>
  </main>
</Layout>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const dbfForm = document.getElementById("dbfForm");
    const addAnotherButton = document.getElementById("addAnother");
		const message = document.getElementById("message");

    // Inicializar localStorage
    localStorage.setItem("formData", JSON.stringify([]));

    addAnotherButton.addEventListener("click", () => {
      const formData = {
        NUM_IDEPER: document.getElementById("num_ideper").value,
        APELLIDO_1: document.getElementById("apellido_1").value,
        APELLIDO_2: document.getElementById("apellido_2").value,
        NOMBRE: document.getElementById("nombre").value,
        NOMB_APELL: document.getElementById("nomb_apell").value,
        DIR_PERSO1: document.getElementById("dir_perso1").value,
        DIR_PERSO2: document.getElementById("dir_perso2").value,
        DIR_PERSO3: document.getElementById("dir_perso3").value,
      };

      // Guardar los datos en localStorage
      const currentData = JSON.parse(localStorage.getItem("formData"));
      currentData.push(formData);
      localStorage.setItem("formData", JSON.stringify(currentData));

      // Limpiar el formulario
      dbfForm.reset();
    });

    dbfForm.addEventListener("submit", async function (event) {
      event.preventDefault();

      // Agregar la última entrada al localStorage
      const formData = {
        NUM_IDEPER: document.getElementById("num_ideper").value,
        APELLIDO_1: document.getElementById("apellido_1").value,
        APELLIDO_2: document.getElementById("apellido_2").value,
        NOMBRE: document.getElementById("nombre").value,
        NOMB_APELL: document.getElementById("nomb_apell").value,
        DIR_PERSO1: document.getElementById("dir_perso1").value,
        DIR_PERSO2: document.getElementById("dir_perso2").value,
        DIR_PERSO3: document.getElementById("dir_perso3").value,
      };

      const currentData = JSON.parse(localStorage.getItem("formData"));
      currentData.push(formData); // Añadir los últimos datos al array
      localStorage.setItem("formData", JSON.stringify(currentData));

      try {
        // Enviar los datos como un arreglo de objetos
        const response = await fetch("/api/person/route", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(currentData),
        });

        if (response.ok) {
          const result = await response.json();
          console.log("Datos enviados con éxito:", result);
					
          if (result.message === "ok") {
            // Limpiar localStorage después de enviar
            localStorage.removeItem("formData");
						message.parentElement.classList.remove("hidden");
						message.innerHTML = "Datos enviados con éxito";
						// agregar estilos de tailwind como clases
						message.classList.add("bg-green-500", "text-white", "p-2", "rounded-lg", "text-center");
            // Descargar el archivo
            const fileResponse = await fetch("/files/" + result.file);
            const blob = await fileResponse.blob();

            const link = document.createElement("a");
            link.href = window.URL.createObjectURL(blob);
            link.download = result.file;
            link.click();
            window.URL.revokeObjectURL(link.href);
          }
        } else {
          console.error("Error en el envío:", response.status);
					message.parentElement.classList.remove("hidden");
					message.innerHTML = "Error en el envío de datos";
					message.classList.add("bg-red-500", "text-white", "p-2", "rounded-lg");
        }
      } catch (error) {
        console.error("Error en el envío de datos:", error);
				// quitar el hidden del parent de message
				
      }
    });
  });
</script>
